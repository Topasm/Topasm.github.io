[{"content":"동아리 서버용 디스코스 설치 명령어 모음\nsudo apt update sudo apt upgrade -y\n패키지 업그레이드\nsudo timedatectl set-timezone \u0026lsquo;Asia/Seoul\u0026rsquo; 시간 변경\nsudo wget -qO- https://get.docker.com/ | sh\n도커 설치\ndocker version\n도커버전 확인\nsudo usermod -aG docker $USER\n도커 권한 부여\nsudo service docker restart\n도커 재시작 sudo -s git clone https://github.com/discourse/discourse_docker.git /var/discourse cd /var/discourse\n깃으로 다운로드\niptables -I INPUT -p tcp \u0026ndash;dport 80 -j ACCEPT iptables -I INPUT -p tcp \u0026ndash;dport 443 -j ACCEPT\n서버 포트 오픈\nsudo netfilter-persistent save sudo netfilter-persistent reload\n세팅 저장\n./discourse-setup\n디스코스 설치 시작\nHostname for your Discourse? [discourse.example.com]: 홈페이지 주소 Email address for admin account(s)? [me@example.com,you@example.com]: 어드민 이메일(개인) SMTP server address? [smtp.example.com]: stmp 서버(난 메일건 썻다) SMTP port? [587]: 기본이 587 SMTP user name? [user@example.com]: 메일건 도메인세팅 가면 있다 SMTP password? [pa$$word]: 메일건 도메인세팅에서 리셋누르면 회색창으로 뜬다 카피 Let\u0026rsquo;s Encrypt account email? (ENTER to skip) [me@example.com]: https 하는거 Optional Maxmind License key () [xxxxxxxxxxxxxxxx]:패스\n./launcher rebuild app\n리빌드및 업데이트\nnano containers/app.yml\n서버 정보 수정\n기다림의 시간\n계속 안되다가 드디어 됬는데\nvcn 설정 전부 날리고 고정 ip 주소를 oracle 로 받았다. 오라클 클라우드 오류가 생긴다면 vcn, subnet 설정을 날리고 다시 해보자.\n","permalink":"https://blog.topasm.me/posts/discourse_setup/","summary":"동아리 서버용 디스코스 설치 명령어 모음\nsudo apt update sudo apt upgrade -y\n패키지 업그레이드\nsudo timedatectl set-timezone \u0026lsquo;Asia/Seoul\u0026rsquo; 시간 변경\nsudo wget -qO- https://get.docker.com/ | sh\n도커 설치\ndocker version\n도커버전 확인\nsudo usermod -aG docker $USER\n도커 권한 부여\nsudo service docker restart\n도커 재시작 sudo -s git clone https://github.com/discourse/discourse_docker.git /var/discourse cd /var/discourse\n깃으로 다운로드\niptables -I INPUT -p tcp \u0026ndash;dport 80 -j ACCEPT iptables -I INPUT -p tcp \u0026ndash;dport 443 -j ACCEPT","title":"Discourse_setup"},{"content":"어떤 프로젝트를 하면서 무엇보다도 도움이 되는것 중 하나가 오픈소스 이다. 왜 오픈소스를 하는걸가 장점 단점을 한번 생각 해 보았다.\n사회 전체로 보았을때 지식의 세계를 자본주의와 비교 하자면, 자본주의에서 돈을 더 많이 가진 사람이 더 많은 힘, 권력을 얻는다. 지식도 마찬가지로 더 많이 알고 배운사람이 대체적으로 높은 지위를 가지게 된다. 하지만 산업화 이후로 부의 격차는 점점더 벌어지고 있고, 대기업의 총수나 재벌은 일반적인 중산층은 넘볼수 없는 엄청난 양극화가 만들어지고 있다. 이러한 상황에서 정부의 제어로 부의 재분배가 일어나고는 있다. 하지만 이것도 다른나라와의 경쟁을 위해 세금을 마구 걷을 수는 없는 처지이다.\n아무튼 이런관점으로 오픈소스를 바라본다면, 일종의 복지정책과 같다는 생각이 든다. 돈의 격차가 나듯이, 지식에도 대기업, 학자와 일반인은 어떤 분야에서 큰격차가 나고, 평범한 일반인이 따라갈 수 없는 차이가 나고 잇다. 자본이 축적되듯 지식도 축적됨에 따라, 지식을 많이 가진 집단은 계속 많이 가지고 있게 된다. 그런면에서 오픈소스는 지식을 공유하며 이러한 격차를 줄일 수 있는데 기여한다고 생각된다. 이러한 지식의 격차가 줄어들어야 더 많은 사람이 도전하고 기술이 진보하는데 도움을 주지 않을까\u0026hellip;\n기업에서 본다면 많은 기업에서 오픈소스를 잘 사용 하지 않는다. 라이센스적인 측면때문에 수익창출에 걸림돌이 되고, 자신의 소스를 공개하는 것으로 다른 기업의 이득을 주거나, 기술의 유출로 보여질 수 있다. 그럼에도 기업에서 봤을 때 장점이라면, 어떤 소프트웨어의 신뢰도를 얻는 것이 장점이지 않나 생각된다. 사람이 서로 만났을때 서로 알지못하는 사람과 거래를 하라면 마음이 편하지 않기 마련이다. 하지만 서로 친해지고 알게 되면 신뢰하고, 믿고 지내듯이 소프트웨어도 어떻게 이루어 져 있는지 공개한다면, 사람들의 신뢰를 얻을 수 있지 않나 생각된다.\nos, 보안관련 된 프로그램 등이 오픈소스이면 좋을거 같다.\n문제점? 오픈소스는 코딩을 배우고 활용하는 입장에서 매우 유용하다. 하지만 문제점이라 생각되는것은 소스를 공개하는 훌륭한 개발자들에게 이익이 돌아가지 않고, 이걸 남용하는 사람들이 있다는 것 같다. 개인적으로 모터드라이버를 제작해보려고 공개되 디자인을 찾다 보니 알리 익스프레스에 공개된 디자인을 본인것처럼 사용해 판매하는게 많이 보였다. 물론 법적으로 문제는 없겠지만, 개발하는 입장에서 그렇게 제 3자가 이득을 보고 있다면 좀 기분 나쁠것 같다. 결국에는 이 공개하는 범위를 잘 설정해서 본인의 이익, 의도에 맞게 활용되도록 해야 할거 같다.\n쓰고보니 그렇게 영양가 있는글은 아닌거 같다. 그래도 블로그에 떠르는 생각을 적다보면 머리가 정리되는 것 같아 좋다. 사람의 뇌란게 OUTPUT 을 만들어 낼때 지식이 구체화 되고 정리되는거 같다.\n","permalink":"https://blog.topasm.me/posts/why_opensource/","summary":"어떤 프로젝트를 하면서 무엇보다도 도움이 되는것 중 하나가 오픈소스 이다. 왜 오픈소스를 하는걸가 장점 단점을 한번 생각 해 보았다.\n사회 전체로 보았을때 지식의 세계를 자본주의와 비교 하자면, 자본주의에서 돈을 더 많이 가진 사람이 더 많은 힘, 권력을 얻는다. 지식도 마찬가지로 더 많이 알고 배운사람이 대체적으로 높은 지위를 가지게 된다. 하지만 산업화 이후로 부의 격차는 점점더 벌어지고 있고, 대기업의 총수나 재벌은 일반적인 중산층은 넘볼수 없는 엄청난 양극화가 만들어지고 있다. 이러한 상황에서 정부의 제어로 부의 재분배가 일어나고는 있다.","title":"오픈소스를 왜 만들고 쓸까"},{"content":"원래 닉네임으로 이름을 쓰다가 도메인으로도 쓰고 닉네임으로도 쓸 영어 닉네임이 필요하다고 느꼈다. 아무래도 한글 이름은 영어권에서 발음하기가 어렵고 길다. 개인적으로 이름이 주는 영향이 크다고 생각하기 때문에 꽤 오랜시간동안 고민했던거 같다. 블로그에 내가 어떤 생각으로 만들었는지 기록해 놓고자 한다.\n고려 했던 점 길지 않을것, 발음하기 쉬울것, 의미가 있는 이름일것 정도 고려 했다. 사실 결론적으로는 완전 만족하진 않은거 같다. 그래도 고민해서 지은거라 오래 써보고 다른 작명을 하게 되면 좀 더 나은 이름을 만들어 봐야지..\nTopaz 로 시작 이름을 짓다보니 원래 있는 단어를 좀 바꿔서 쓰는게 좋다고 생각이 들었다. 사람들 입에 익은단어가 발음하기 쉽기 때문이다. 그때 한창 컴퓨터 언어를 여러가지 보게되었는데 그때 봤던게 ruby 언어 였다. 이런 보석이름 비슷하게 지은 언어들이 몇게 있기도 해서 이런저런 보석이름을 찾아봤는데 그때 눈에 띈게 Topaz 였고 어감이나 그때 위키 백과에 있던 어원이 맘에 들었다.\n토파즈는 '찾다'라는 뜻의 그리스어 토파지오스(Topazios)에서 유래했다. 토파지오스는 원래 홍해에 있는 섬인데，안개에 싸여 좀처럼 찾을 수 없었기 때문에 섬 이름을 '찾는 섬'이라고 불렀다. 그 섬에 아름다운 보석이 많았지만 단연 돋보이는 깊은 노란색 보석을 섬 이름을 따 토파즈라고 부르게 됐다. 라고 영어 위키에 있었는데 지금은 그 내용이 바뀌었다. 아무튼 그래서 topaz 로 하려고 하다가 보석이 나올거 같에서 topas 로 했다 그런데 github 에 이미 등록된 닉네임이라 안되서 좀더 고민을 하다가 topaz + prism 이런 목적으로 topasm 으로 지었다. 닉네임을 지을때는 몰랐는데 친구들은 top + assembly 이런 뜻 아니냐고 물어보던데 뭐 그런 의미도 나쁘지 않아 보인다.\n아쉬운점  .com 도메인이 이미 등록 되어 있다. 도메인을 사려고 보니까 같은 이름으로 등록이 있어서 아쉬었다. 발음하기가 좀 어렵다. 토파즘? 나쁘진 않은데 자음+모음/자음+모음 이런식으로 짓는게 가장 발음하기가 쉽다.  깃헙 블로그를 만들었던게 개인적인 생각도 자유롭게 써보려는 의도도 있었다. 앞으로도 내 생각들을 좀더 적어보려 한다.\n","permalink":"https://blog.topasm.me/posts/origin_of_topasm/","summary":"원래 닉네임으로 이름을 쓰다가 도메인으로도 쓰고 닉네임으로도 쓸 영어 닉네임이 필요하다고 느꼈다. 아무래도 한글 이름은 영어권에서 발음하기가 어렵고 길다. 개인적으로 이름이 주는 영향이 크다고 생각하기 때문에 꽤 오랜시간동안 고민했던거 같다. 블로그에 내가 어떤 생각으로 만들었는지 기록해 놓고자 한다.\n고려 했던 점 길지 않을것, 발음하기 쉬울것, 의미가 있는 이름일것 정도 고려 했다. 사실 결론적으로는 완전 만족하진 않은거 같다. 그래도 고민해서 지은거라 오래 써보고 다른 작명을 하게 되면 좀 더 나은 이름을 만들어 봐야지.","title":"topasm 이름의 유래"},{"content":"저번 글까지 따라왔다면 로컬에 블로그 화면을 띄울 수 있을 것이다. 이제 github pages 와 github actions 기능을 이용해 커밋과 동시에 빌드해 사이트를 배포하도록 해본다. 그리고 커스텀 도메인을 사용하도록 설정 해본다.\nrepository 만들기 커스텀 도메인을 이용하지 않는 경우 저장소(repository) 이름이 사이트 주소를 결정한다. 닉네임.github.io 으로 하면 주소가 닉네임.github.io 가 되고 아무이름 으로 하면 닉네임.github.io/아무이름 이런 식으로 주소가 개설 된다.\ngithub action 사용하기  personal access token 발급받기 github 접속 \u0026gt; developer settings \u0026gt; personal access token \u0026gt; generate new token 라고 하면 창이 뜬다.   public_repo 에 체크  Note에 토큰 이름(영어로) ex)Hugo_Token\n Token 사용 설정 토큰을 사용할 repository -\u0026gt; setting -\u0026gt; seeret -\u0026gt; new secret-\u0026gt; 만든 토큰 이름(Note), 아까 저장한 토큰 값을 적어준다(랜덤한 문자 숫자로 되어 있음).\n  github actions 활성화 저장소로 가면 Actions 항목이 있다. 클릭한 다음 Set up this workflow를 클릭한 후 action을 작성하면 된다. 아래 사이트에 자세한 설명이 있다. 참고: actions-hugo\n  # action 이름. 원하는대로 정하면 된다. name: deploy ghpage # on: 뒤에오는 event가 발생하면 action이 실행된다. 아래는 master branch에 push 나 pull request가 발생하면 action이 실행되는 코드이다. 보통 그냥 두면 된다. on: push: branches: [ master ] pull_request: branches: [ master ] # jobs은 실행될 action을 포함하고 있다. jobs: build: runs-on: ubuntu-20.04 #steps는 명령어 들이다. # uses는 이미 만들어진 action을 사용하는 것, run은 명령어를 실행하는 것이다. steps: #1. 가상머신으로 checkout - uses: actions/checkout@v2 #2. theme를 submodule로 등록했는데 그것도 checkout - name: Checkout submodules shell: bash run: | auth_header=\u0026quot;$(git config --local --get http.https://github.com/.extraheader)\u0026quot; git submodule sync --recursive git -c \u0026quot;http.extraheader=$auth_header\u0026quot; -c protocol.version=2 submodule update --init --force --recursive --depth=1 # run 다음 내용들은 submodule을 최신으로 udapte한것을 가져오는 내용 + a이다. #4. Hugo 설치 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: 'latest' #5. build (public 폴더에 저장 된다.) - name: Build Hugo Site run: | hugo --minify # minify는 압축시키는 것을 의미한다. #6.Deploy 배포: git token이 필요하다. gh-pages로 publish하는 것 잊지 말자 #public 폴더를 github page의 gh-pages 브챈치에 배포한다는 의미이다. - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.아까 만든 토큰 이름 }} publish_branch: gh-pages publish_dir: ./public 내가 사용하는 workflows 스크립트이다. 빌드하고 배포만 하는거라 그냥 복붙해서 사용하는게 좋다.\ngithub에 사이트 파일 업로드 Vscode 에서 터미널 실행한 후\ngit init //깃 실행 git remote add origin https~~~~ //자신의 저장소 주소추가 git push -u origin master //깃에 업로드 이렇게 하면 깃헙에 업로드 되고 사이트가 생성될것이다.\n포스트를 썻다면 그냥 VScode 소스제어 항목에서 +로 변경을 모두 커밋하고 push 를 하는게 편하다.\n커스텀 도메인 오류 해결 사이트를 개설하고 난 후 repository의 settings \u0026gt; pages 로 가면 커스텀 도메인을 넣을 수 있다. 문제는 빌드할 때마다 이 커스텀 도메인이 풀리는 문제가 있다.\n . ├── config.toml ├── content/ │ └── posts/ ├── static/ └── themes/ └── PaperMod/ 여기서 static폴더 아래에 CNAME 파일을 생성하고 커스텀 도메인주소를 입력한 후 저장한후 커밋하면 커스텀 도메인이 안풀린다. (http 없이 주소만 입력하고 확장자없고, CNAME 은 대문자로 해야 한다.)\n생각보다 가이드 쓰는게 어렵다. 다음에는 좀 더 잘써봐야지..\n","permalink":"https://blog.topasm.me/posts/making_blog3/","summary":"저번 글까지 따라왔다면 로컬에 블로그 화면을 띄울 수 있을 것이다. 이제 github pages 와 github actions 기능을 이용해 커밋과 동시에 빌드해 사이트를 배포하도록 해본다. 그리고 커스텀 도메인을 사용하도록 설정 해본다.\nrepository 만들기 커스텀 도메인을 이용하지 않는 경우 저장소(repository) 이름이 사이트 주소를 결정한다. 닉네임.github.io 으로 하면 주소가 닉네임.github.io 가 되고 아무이름 으로 하면 닉네임.github.io/아무이름 이런 식으로 주소가 개설 된다.\ngithub action 사용하기  personal access token 발급받기 github 접속 \u0026gt; developer settings \u0026gt; personal access token \u0026gt; generate new token 라고 하면 창이 뜬다.","title":"Hugo 와 github action 을 이용해 블로그 만들기 - 3완"},{"content":"이어서 VS 코드를 켰다면\n. ├── config.toml ├── content/ │ └── posts/ ├── static/ └── themes/ └── PaperMod/ 이러한 폴더구조로 되어있다.\nconfig 수정 이제 config.toml 을 수정해야 한다. Vscode 에서 config.toml파일을 클릭해 수정해보자. 내가 사용하는 papermod 의 예시는 아래와 같다.\nbaseURL = \u0026quot;https://examplesite.com/\u0026quot; title = \u0026quot;ExampleSite\u0026quot; paginate = 5 theme = \u0026quot;PaperMod\u0026quot; enableRobotsTXT = true buildDrafts = false buildFuture = false buildExpired = false googleAnalytics = \u0026quot;UA-123-45\u0026quot; [minify] disableXML = true minifyOutput = true [params] env = \u0026quot;production\u0026quot; title = \u0026quot;ExampleSite\u0026quot; description = \u0026quot;ExampleSite description\u0026quot; keywords = [ \u0026quot;Blog\u0026quot;, \u0026quot;Portfolio\u0026quot;, \u0026quot;PaperMod\u0026quot; ] author = \u0026quot;Me\u0026quot; images = [ \u0026quot;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026quot; ] DateFormat = \u0026quot;January 2, 2006\u0026quot; defaultTheme = \u0026quot;auto\u0026quot; disableThemeToggle = false ShowReadingTime = true ShowShareButtons = true ShowPostNavLinks = true ShowBreadCrumbs = true ShowCodeCopyButtons = false disableSpecial1stPost = false disableScrollToTop = false comments = false hidemeta = false hideSummary = false showtoc = false tocopen = false [params.assets] favicon = \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; favicon16x16 = \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; favicon32x32 = \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; apple_touch_icon = \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; safari_pinned_tab = \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; [params.label] text = \u0026quot;Home\u0026quot; icon = \u0026quot;/apple-touch-icon.png\u0026quot; iconHeight = 35 [params.profileMode] enabled = false title = \u0026quot;ExampleSite\u0026quot; subtitle = \u0026quot;This is subtitle\u0026quot; imageUrl = \u0026quot;\u0026lt;img location\u0026gt;\u0026quot; imageWidth = 120 imageHeight = 120 imageTitle = \u0026quot;my image\u0026quot; [[params.profileMode.buttons]] name = \u0026quot;Posts\u0026quot; url = \u0026quot;posts\u0026quot; [[params.profileMode.buttons]] name = \u0026quot;Tags\u0026quot; url = \u0026quot;tags\u0026quot; [params.homeInfoParams] Title = \u0026quot;Hi there 👋\u0026quot; Content = \u0026quot;Welcome to my blog\u0026quot; [[params.socialIcons]] name = \u0026quot;twitter\u0026quot; url = \u0026quot;https://twitter.com/\u0026quot; [[params.socialIcons]] name = \u0026quot;stackoverflow\u0026quot; url = \u0026quot;https://stackoverflow.com\u0026quot; [[params.socialIcons]] name = \u0026quot;github\u0026quot; url = \u0026quot;https://github.com/\u0026quot; [params.analytics.google] SiteVerificationTag = \u0026quot;XYZabc\u0026quot; [params.analytics.bing] SiteVerificationTag = \u0026quot;XYZabc\u0026quot; [params.analytics.yandex] SiteVerificationTag = \u0026quot;XYZabc\u0026quot; [params.cover] hidden = true hiddenInList = true hiddenInSingle = true [params.editPost] URL = \u0026quot;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026quot; Text = \u0026quot;Suggest Changes\u0026quot; appendFilePath = true [params.fuseOpts] isCaseSensitive = false shouldSort = true location = 0 distance = 1_000 threshold = 0.4 minMatchCharLength = 0 keys = [ \u0026quot;title\u0026quot;, \u0026quot;permalink\u0026quot;, \u0026quot;summary\u0026quot;, \u0026quot;content\u0026quot; ] [[menu.main]] identifier = \u0026quot;categories\u0026quot; name = \u0026quot;categories\u0026quot; url = \u0026quot;/categories/\u0026quot; weight = 10 [[menu.main]] identifier = \u0026quot;tags\u0026quot; name = \u0026quot;tags\u0026quot; url = \u0026quot;/tags/\u0026quot; weight = 20 [[menu.main]] identifier = \u0026quot;example\u0026quot; name = \u0026quot;example.org\u0026quot; url = \u0026quot;https://example.org\u0026quot; weight = 30 config 부분은 테마마다 상이 하므로 테마의 문서를 확인하면서 변경해주어야 한다. blog/config.toml at master · Topasm/blog (github.com) 위는 papermod를 사용한 내 블로그의 예시 이다.\n글 작성 드디어 글을 작성할 차례이다. Vscode 에서 Ctrl + ` 키를 눌러 터미널을 띄운다. 그리고 아래 명령어를 입력하면 content 폴더 아래 posts 폴더가 생기고 md(마크다운) 파일이 생긴다.\nhugo new posts/글_tile.md 로컬에서 테스트 글을 작성했다면 Ctrl + s 로 저장하고\nHugo server -D 를 하면 http://localhost:1313/ 에서 본인의 블로그 포스트를 확인할 수 있다. 글을 수정하거나 config.toml 파일을 변경해서 저장할 때마다 브라우저에서 바로 확인 할 수 있으므로, 초기 설정할 때 유용하다.\n이제 깃헙에 올리고 빌드 스크립트를 짜면 블로그를 인터넷으로 접속할 수 있다.\n","permalink":"https://blog.topasm.me/posts/making_blog2/","summary":"이어서 VS 코드를 켰다면\n. ├── config.toml ├── content/ │ └── posts/ ├── static/ └── themes/ └── PaperMod/ 이러한 폴더구조로 되어있다.\nconfig 수정 이제 config.toml 을 수정해야 한다. Vscode 에서 config.toml파일을 클릭해 수정해보자. 내가 사용하는 papermod 의 예시는 아래와 같다.\nbaseURL = \u0026quot;https://examplesite.com/\u0026quot; title = \u0026quot;ExampleSite\u0026quot; paginate = 5 theme = \u0026quot;PaperMod\u0026quot; enableRobotsTXT = true buildDrafts = false buildFuture = false buildExpired = false googleAnalytics = \u0026quot;UA-123-45\u0026quot; [minify] disableXML = true minifyOutput = true [params] env = \u0026quot;production\u0026quot; title = \u0026quot;ExampleSite\u0026quot; description = \u0026quot;ExampleSite description\u0026quot; keywords = [ \u0026quot;Blog\u0026quot;, \u0026quot;Portfolio\u0026quot;, \u0026quot;PaperMod\u0026quot; ] author = \u0026quot;Me\u0026quot; images = [ \u0026quot;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026quot; ] DateFormat = \u0026quot;January 2, 2006\u0026quot; defaultTheme = \u0026quot;auto\u0026quot; disableThemeToggle = false ShowReadingTime = true ShowShareButtons = true ShowPostNavLinks = true ShowBreadCrumbs = true ShowCodeCopyButtons = false disableSpecial1stPost = false disableScrollToTop = false comments = false hidemeta = false hideSummary = false showtoc = false tocopen = false [params.","title":"Hugo 와 github action 을 이용해 블로그 만들기 - 2"},{"content":"윈도우 환경에서 내가 블로그 개발을 한 방법을 소개 한다.\n레포지토리를 1개만 생성하고 github actions 를 이용해 커밋만 하면 자동으로 웹페이지로 배포 되도록 만들었다. 그리고 go 로 짜여진 hugo 를 이용하였다. 이유는 업데이트가 빠르고 빌드속도가 빠르기 때문이다.\n준비물  깃헙 계정 GitHub 윈도우 터미널 설치 Windows Terminal installation | Microsoft Docs 깃 설치 Git - Downloads (git-scm.com) vscode 설치 Visual Studio Code - Code Editing. Redefined go 언어 설치 The Go Programming Language (golang.org)  choco 와 hugo 설치 choco 는 윈도우의 비공식 패키지 매니저이다. 명령어로 동작하는 스토어 같은것이다. hugo는 사이트 생성기이다.\n choco 설치( Chocolatey Software | Installing Chocolatey) 윈도우 터미널을 관리자 권한으로 열고 아래코드를 복사 붙여넣기 한다.  Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')) hugo 설치( Install Hugo | Hugo (gohugo.io))  choco install hugo -confirm 이제 사이트를 생성하기 위한 준비 작업이 끝났다.\n사이트 소스 생성 사이트 소스를 저장할 폴더를 생성한다. 나는 c:\\hugo 이런식으로 만들었다. 코드가 들어갈 경로는 항상 한글을 피하는게 좋다.\nhugo new site sitename cd sitename git init 사이트 생성할 폴더와 코드를 생성해 주는 코드이다. sitename 은 원하는 대로 바꿔도 된다. cd sitename은 sitename 폴더로 들어가는 명령어이다. git 사용을 위해 init 해준다.\n이제 테마를 받아야 한다. 테마리스트 Complete List | Hugo Themes (gohugo.io)\n여기서 다운로드 버튼을 누르면 깃헙으로 들어가지는데 난 GitHub - adityatelange/hugo-PaperMod: A fast, clean, responsive Hugo theme. 이걸 이용했다.\ngit submodule add [git 주소] themes/[테마 이름] git submodule update --init --recursive 하면 되는데 papermod의 경우는\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) 이렇게 됬다면 c:\\hugo\\sitename 이런식으로 폴더가 생성되어있고 sitename 내부에는 여러 폴더가 생성되어 있을것이다. 이 안에서 VScode를 실행시킨다.\nVscode 에서 폴더 열기로 들어가 sitename 폴더로 들어가면 된다.\n","permalink":"https://blog.topasm.me/posts/making_blog/","summary":"윈도우 환경에서 내가 블로그 개발을 한 방법을 소개 한다.\n레포지토리를 1개만 생성하고 github actions 를 이용해 커밋만 하면 자동으로 웹페이지로 배포 되도록 만들었다. 그리고 go 로 짜여진 hugo 를 이용하였다. 이유는 업데이트가 빠르고 빌드속도가 빠르기 때문이다.\n준비물  깃헙 계정 GitHub 윈도우 터미널 설치 Windows Terminal installation | Microsoft Docs 깃 설치 Git - Downloads (git-scm.com) vscode 설치 Visual Studio Code - Code Editing. Redefined go 언어 설치 The Go Programming Language (golang.","title":"Hugo 와 github action 을 이용해 블로그 만들기 - 1"},{"content":"깃헙에 많은 오픈소스가 공개되어 있는데 라이센스를 잘못 이용하면 문제가 생길 수 있기 때문에 대략적으로 알고 있으면 좋다\nGNU GPL License:  GPL 라이센스라고 부르며 이 라이센스를 이용했으면 이용해서 만든 소스를 공개해야 한다. GPL 에도 LGPL, GPL 2 등 세부 종류가 있지만 대체적으로 오픈소스를 사용했다면 내 소스 오픈이 기본  대표적으로 리눅스가 이 라이센스이다.\nBSD License:  이건 출처를 밝히는게 원칙. BSD 소스를 이용했으면 소스 사용을 표기해야 함. 상업용으로 사용해도 무관하고 소스공개를 하지 않아도 됨  대표적으로 OpenCV, FreeBSD, 맥os가 BSD라이센스이다.\nApache License:  아파치 재단의 라이센스. 소스코드 공개 의무 는 없고. 소스를 사용하였다면, 아파치 라이센스 사용을 밝혀야 함. BSD랑 비슷함.  대표적으로 안드로이드가 아파치 라이센스이다.\nMIT License:  가장 제한이 없는 라이센스. 소스코드 오픈의무도 없고 상업용으로 사용해도 상관없다.  유명한 JQuery, Bootstrap 등 이 MIT 라이센스이다.\n 보통 GPL 과 MIT 가 가장 많이 보이는데 GPL 을 사용할 때는 조심해야 한다. 요즘엔 프리하게 MIT로 푸는 추세이지만, 다른 사람이 내 소스를 이용해 판매하는 걸 막으려면 GPL 류로 걸거나, 소스공개를 안하면 된다.\n유명한것만 아는대로 적었는데 아래 링크에 가면 더많은 종류와 자세한 설명이 있다.\n라이선스 분류 | 오픈소스SW 라이선스 종합정보시스템 OLIS\nhttps://rats.topasm.me/t/topic/107\n동아리 홈페이지에 썻던글을 퍼왔다.\n","permalink":"https://blog.topasm.me/posts/opensource_licenses/","summary":"깃헙에 많은 오픈소스가 공개되어 있는데 라이센스를 잘못 이용하면 문제가 생길 수 있기 때문에 대략적으로 알고 있으면 좋다\nGNU GPL License:  GPL 라이센스라고 부르며 이 라이센스를 이용했으면 이용해서 만든 소스를 공개해야 한다. GPL 에도 LGPL, GPL 2 등 세부 종류가 있지만 대체적으로 오픈소스를 사용했다면 내 소스 오픈이 기본  대표적으로 리눅스가 이 라이센스이다.\nBSD License:  이건 출처를 밝히는게 원칙. BSD 소스를 이용했으면 소스 사용을 표기해야 함. 상업용으로 사용해도 무관하고 소스공개를 하지 않아도 됨  대표적으로 OpenCV, FreeBSD, 맥os가 BSD라이센스이다.","title":"오픈소스 라이센스 정리"},{"content":"블로그 개설 후 글을 쓰려고 하니 블로그에 가독성 좋은 글을 쓰기 위해서는 마크다운 문법에 대한 복습이 필요하다고 생각이 들었다. 최대한 내가 쓸 문법들만 모아서 정리해보았다.\nHeading 제목 # H1 ## H2 ### H3 H1 H2 H3 Bold 볼드 Italic 이탈릭 Strikethrough 줄긋기 **bold text** *italicized text* ~~줄긋기~~ bold text italicized text 줄긋기\nBlockquote 인용 \u0026gt; blockquote 인용하고 싶은글  blockquote 인용하고 싶은글\n Ordered List 순서있는 리스트 1. First item 2. Second item 3. Third item  First item Second item Third item  Unordered List 순서 없는 리스트 - First item - Second item - Third item  First item Second item Third item  Code 코드(한줄) `code in the home` code in the home\nHorizontal Rule 가로줄 ---  Link 링크 [링크 제목](https://github.com/Topasm) 링크 제목은 내 깃헙\nImage 이미지 ![alt text](https://이미지_주소images/image.png) Table 표 | Syntax | Description | | ----------- | ----------- | | Header | Title | | Paragraph | Text |    Syntax Description     Header Title   Paragraph Text    코드블록 ``` 이걸 위아래 붙여 준다.\n{ \u0026quot;c\u0026quot;, \u0026quot;java\u0026quot;를 뒤에 붙여 주면 언어에 맞게 하이라이팅 된다. } Task List - [x] 체크표시 있음 - [ ] 체크표시 없음  체크표시 있음 체크표시 없음  youtube 중괄호 2개 부등식기호1개로 하고 {랑 \u0026lt;로 ( youtube v머시기 코드)\nhttps://youtu.be/vZ4Os97-wVQ 주소 뒷부분의 코드를 따서 붙여넣으면 된다\n  ","permalink":"https://blog.topasm.me/posts/markdown_grammer/","summary":"블로그 개설 후 글을 쓰려고 하니 블로그에 가독성 좋은 글을 쓰기 위해서는 마크다운 문법에 대한 복습이 필요하다고 생각이 들었다. 최대한 내가 쓸 문법들만 모아서 정리해보았다.\nHeading 제목 # H1 ## H2 ### H3 H1 H2 H3 Bold 볼드 Italic 이탈릭 Strikethrough 줄긋기 **bold text** *italicized text* ~~줄긋기~~ bold text italicized text 줄긋기\nBlockquote 인용 \u0026gt; blockquote 인용하고 싶은글  blockquote 인용하고 싶은글\n Ordered List 순서있는 리스트 1. First item 2.","title":"마크다운 문법 정리"}]